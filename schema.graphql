# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union Morph = Artisans | ArtisansAggregator | ArtisansAggregatorAvg | ArtisansAggregatorMax | ArtisansAggregatorMin | ArtisansAggregatorSum | ArtisansConnection | ArtisansConnectionBio | ArtisansConnectionCreatedAt | ArtisansConnectionId | ArtisansConnectionImage | ArtisansConnectionLocation | ArtisansConnectionName | ArtisansConnectionRating | ArtisansConnectionSlug | ArtisansConnectionStatus | ArtisansConnectionUpdatedAt | ArtisansConnection_id | ArtisansGroupBy | Category | CategoryAggregator | CategoryConnection | CategoryConnectionCreatedAt | CategoryConnectionDescription | CategoryConnectionId | CategoryConnectionName | CategoryConnectionSlug | CategoryConnectionUpdatedAt | CategoryConnection_id | CategoryGroupBy | ComponentCustomCustomField | I18NLocale | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreatedAt | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdatedAt | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileConnection_id | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnection_id | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnection_id | UsersPermissionsUserGroupBy | createArtisanPayload | createCategoryPayload | createRolePayload | createUserPayload | deleteArtisanPayload | deleteCategoryPayload | deleteFilePayload | deleteRolePayload | deleteUserPayload | updateArtisanPayload | updateCategoryPayload | updateRolePayload | updateUserPayload

type AdminUser {
    firstname: String!
    id: ID!
    lastname: String!
    username: String
}

type Artisans {
    Custom_field: [ComponentCustomCustomField]
    _id: ID!
    bio: String!
    categories(limit: Int, sort: String, start: Int, where: JSON): [Category]
    createdAt: DateTime!
    id: ID!
    image: UploadFile
    location: String!
    name: String!
    rating: Float
    slug: String!
    status: ENUM_ARTISANS_STATUS!
    updatedAt: DateTime!
}

type ArtisansAggregator {
    avg: ArtisansAggregatorAvg
    count: Int
    max: ArtisansAggregatorMax
    min: ArtisansAggregatorMin
    sum: ArtisansAggregatorSum
    totalCount: Int
}

type ArtisansAggregatorAvg {
    rating: Float
}

type ArtisansAggregatorMax {
    rating: Float
}

type ArtisansAggregatorMin {
    rating: Float
}

type ArtisansAggregatorSum {
    rating: Float
}

type ArtisansConnection {
    aggregate: ArtisansAggregator
    groupBy: ArtisansGroupBy
    values: [Artisans]
}

type ArtisansConnectionBio {
    connection: ArtisansConnection
    key: String
}

type ArtisansConnectionCreatedAt {
    connection: ArtisansConnection
    key: DateTime
}

type ArtisansConnectionId {
    connection: ArtisansConnection
    key: ID
}

type ArtisansConnectionImage {
    connection: ArtisansConnection
    key: ID
}

type ArtisansConnectionLocation {
    connection: ArtisansConnection
    key: String
}

type ArtisansConnectionName {
    connection: ArtisansConnection
    key: String
}

type ArtisansConnectionRating {
    connection: ArtisansConnection
    key: Float
}

type ArtisansConnectionSlug {
    connection: ArtisansConnection
    key: String
}

type ArtisansConnectionStatus {
    connection: ArtisansConnection
    key: String
}

type ArtisansConnectionUpdatedAt {
    connection: ArtisansConnection
    key: DateTime
}

type ArtisansConnection_id {
    connection: ArtisansConnection
    key: ID
}

type ArtisansGroupBy {
    _id: [ArtisansConnection_id]
    bio: [ArtisansConnectionBio]
    createdAt: [ArtisansConnectionCreatedAt]
    id: [ArtisansConnectionId]
    image: [ArtisansConnectionImage]
    location: [ArtisansConnectionLocation]
    name: [ArtisansConnectionName]
    rating: [ArtisansConnectionRating]
    slug: [ArtisansConnectionSlug]
    status: [ArtisansConnectionStatus]
    updatedAt: [ArtisansConnectionUpdatedAt]
}

type Category {
    _id: ID!
    artisan(limit: Int, sort: String, start: Int, where: JSON): [Artisans]
    createdAt: DateTime!
    description: String!
    id: ID!
    image(limit: Int, sort: String, start: Int, where: JSON): [UploadFile]
    name: String
    slug: String
    updatedAt: DateTime!
}

type CategoryAggregator {
    count: Int
    totalCount: Int
}

type CategoryConnection {
    aggregate: CategoryAggregator
    groupBy: CategoryGroupBy
    values: [Category]
}

type CategoryConnectionCreatedAt {
    connection: CategoryConnection
    key: DateTime
}

type CategoryConnectionDescription {
    connection: CategoryConnection
    key: String
}

type CategoryConnectionId {
    connection: CategoryConnection
    key: ID
}

type CategoryConnectionName {
    connection: CategoryConnection
    key: String
}

type CategoryConnectionSlug {
    connection: CategoryConnection
    key: String
}

type CategoryConnectionUpdatedAt {
    connection: CategoryConnection
    key: DateTime
}

type CategoryConnection_id {
    connection: CategoryConnection
    key: ID
}

type CategoryGroupBy {
    _id: [CategoryConnection_id]
    createdAt: [CategoryConnectionCreatedAt]
    description: [CategoryConnectionDescription]
    id: [CategoryConnectionId]
    name: [CategoryConnectionName]
    slug: [CategoryConnectionSlug]
    updatedAt: [CategoryConnectionUpdatedAt]
}

type ComponentCustomCustomField {
    _id: ID!
    id: ID!
    options: String
    required: Boolean
    title: String
}

type I18NLocale {
    _id: ID!
    code: String
    createdAt: DateTime!
    id: ID!
    name: String
    updatedAt: DateTime!
}

type Mutation {
    createArtisan(input: createArtisanInput): createArtisanPayload
    createCategory(input: createCategoryInput): createCategoryPayload
    "Create a new role"
    createRole(input: createRoleInput): createRolePayload
    "Create a new user"
    createUser(input: createUserInput): createUserPayload
    deleteArtisan(input: deleteArtisanInput): deleteArtisanPayload
    deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
    "Delete one file"
    deleteFile(input: deleteFileInput): deleteFilePayload
    "Delete an existing role"
    deleteRole(input: deleteRoleInput): deleteRolePayload
    "Delete an existing user"
    deleteUser(input: deleteUserInput): deleteUserPayload
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    forgotPassword(email: String!): UserPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateArtisan(input: updateArtisanInput): updateArtisanPayload
    updateCategory(input: updateCategoryInput): updateCategoryPayload
    updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
    "Update an existing role"
    updateRole(input: updateRoleInput): updateRolePayload
    "Update an existing user"
    updateUser(input: updateUserInput): updateUserPayload
    upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID, source: String): UploadFile!
}

type Query {
    artisan(id: ID!, publicationState: PublicationState): Artisans
    artisans(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Artisans]
    artisansConnection(limit: Int, sort: String, start: Int, where: JSON): ArtisansConnection
    categories(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Category]
    categoriesConnection(limit: Int, sort: String, start: Int, where: JSON): CategoryConnection
    category(id: ID!, publicationState: PublicationState): Category
    files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
    filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
    me: UsersPermissionsMe
    role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
    "Retrieve all the existing roles. You can't apply filters on this query."
    roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
    rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
    user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
    users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
    usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

type UploadFile {
    _id: ID!
    alternativeText: String
    caption: String
    createdAt: DateTime!
    ext: String
    formats: JSON
    hash: String!
    height: Int
    id: ID!
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
    size: Float!
    updatedAt: DateTime!
    url: String!
    width: Int
}

type UploadFileAggregator {
    avg: UploadFileAggregatorAvg
    count: Int
    max: UploadFileAggregatorMax
    min: UploadFileAggregatorMin
    sum: UploadFileAggregatorSum
    totalCount: Int
}

type UploadFileAggregatorAvg {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMax {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMin {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorSum {
    height: Float
    size: Float
    width: Float
}

type UploadFileConnection {
    aggregate: UploadFileAggregator
    groupBy: UploadFileGroupBy
    values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCaption {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCreatedAt {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionExt {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionFormats {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionHash {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionHeight {
    connection: UploadFileConnection
    key: Int
}

type UploadFileConnectionId {
    connection: UploadFileConnection
    key: ID
}

type UploadFileConnectionMime {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionName {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionPreviewUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider_metadata {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionSize {
    connection: UploadFileConnection
    key: Float
}

type UploadFileConnectionUpdatedAt {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionWidth {
    connection: UploadFileConnection
    key: Int
}

type UploadFileConnection_id {
    connection: UploadFileConnection
    key: ID
}

type UploadFileGroupBy {
    _id: [UploadFileConnection_id]
    alternativeText: [UploadFileConnectionAlternativeText]
    caption: [UploadFileConnectionCaption]
    createdAt: [UploadFileConnectionCreatedAt]
    ext: [UploadFileConnectionExt]
    formats: [UploadFileConnectionFormats]
    hash: [UploadFileConnectionHash]
    height: [UploadFileConnectionHeight]
    id: [UploadFileConnectionId]
    mime: [UploadFileConnectionMime]
    name: [UploadFileConnectionName]
    previewUrl: [UploadFileConnectionPreviewUrl]
    provider: [UploadFileConnectionProvider]
    provider_metadata: [UploadFileConnectionProvider_metadata]
    size: [UploadFileConnectionSize]
    updatedAt: [UploadFileConnectionUpdatedAt]
    url: [UploadFileConnectionUrl]
    width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    email: String!
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPermission {
    _id: ID!
    action: String!
    controller: String!
    enabled: Boolean!
    id: ID!
    policy: String
    role: UsersPermissionsRole
    type: String!
}

type UsersPermissionsRole {
    _id: ID!
    description: String
    id: ID!
    name: String!
    permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
    type: String
    users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsRoleConnection {
    aggregate: UsersPermissionsRoleAggregator
    groupBy: UsersPermissionsRoleGroupBy
    values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionId {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleConnectionName {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionType {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnection_id {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleGroupBy {
    _id: [UsersPermissionsRoleConnection_id]
    description: [UsersPermissionsRoleConnectionDescription]
    id: [UsersPermissionsRoleConnectionId]
    name: [UsersPermissionsRoleConnectionName]
    type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
    _id: ID!
    blocked: Boolean
    confirmed: Boolean
    createdAt: DateTime!
    email: String!
    id: ID!
    provider: String
    role: UsersPermissionsRole
    updatedAt: DateTime!
    username: String!
}

type UsersPermissionsUserAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsUserConnection {
    aggregate: UsersPermissionsUserAggregator
    groupBy: UsersPermissionsUserGroupBy
    values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionCreatedAt {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionEmail {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionId {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionProvider {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionRole {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionUpdatedAt {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionUsername {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnection_id {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserGroupBy {
    _id: [UsersPermissionsUserConnection_id]
    blocked: [UsersPermissionsUserConnectionBlocked]
    confirmed: [UsersPermissionsUserConnectionConfirmed]
    createdAt: [UsersPermissionsUserConnectionCreatedAt]
    email: [UsersPermissionsUserConnectionEmail]
    id: [UsersPermissionsUserConnectionId]
    provider: [UsersPermissionsUserConnectionProvider]
    role: [UsersPermissionsUserConnectionRole]
    updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
    username: [UsersPermissionsUserConnectionUsername]
}

type createArtisanPayload {
    artisan: Artisans
}

type createCategoryPayload {
    category: Category
}

type createRolePayload {
    role: UsersPermissionsRole
}

type createUserPayload {
    user: UsersPermissionsUser
}

type deleteArtisanPayload {
    artisan: Artisans
}

type deleteCategoryPayload {
    category: Category
}

type deleteFilePayload {
    file: UploadFile
}

type deleteRolePayload {
    role: UsersPermissionsRole
}

type deleteUserPayload {
    user: UsersPermissionsUser
}

type updateArtisanPayload {
    artisan: Artisans
}

type updateCategoryPayload {
    category: Category
}

type updateRolePayload {
    role: UsersPermissionsRole
}

type updateUserPayload {
    user: UsersPermissionsUser
}

enum ENUM_ARTISANS_STATUS {
    draft
    published
}

enum PublicationState {
    LIVE
    PREVIEW
}

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `Long` scalar type represents 52-bit integers"
scalar Long

"A time string with format: HH:mm:ss.SSS"
scalar Time

"The `Upload` scalar type represents a file upload."
scalar Upload

input ArtisanInput {
    Custom_field: [ComponentCustomCustomFieldInput]
    bio: String!
    categories: [ID]
    created_by: ID
    image: ID
    location: String!
    name: String!
    rating: Float
    slug: String!
    status: ENUM_ARTISANS_STATUS
    updated_by: ID
}

input CategoryInput {
    artisan: [ID]
    created_by: ID
    description: String!
    image: [ID]
    name: String
    slug: String
    updated_by: ID
}

input ComponentCustomCustomFieldInput {
    options: String
    required: Boolean
    title: String
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String!
    height: Int
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [ID]
    size: Float!
    updated_by: ID
    url: String!
    width: Int
}

input InputID {
    id: ID!
}

input LocaleInput {
    code: String
    created_by: ID
    name: String
    updated_by: ID
}

input RoleInput {
    created_by: ID
    description: String
    name: String!
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input UserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String!
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String!
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String = "local"
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input createArtisanInput {
    data: ArtisanInput
}

input createCategoryInput {
    data: CategoryInput
}

input createRoleInput {
    data: RoleInput
}

input createUserInput {
    data: UserInput
}

input deleteArtisanInput {
    where: InputID
}

input deleteCategoryInput {
    where: InputID
}

input deleteFileInput {
    where: InputID
}

input deleteRoleInput {
    where: InputID
}

input deleteUserInput {
    where: InputID
}

input editArtisanInput {
    Custom_field: [editComponentCustomCustomFieldInput]
    bio: String
    categories: [ID]
    created_by: ID
    image: ID
    location: String
    name: String
    rating: Float
    slug: String
    status: ENUM_ARTISANS_STATUS
    updated_by: ID
}

input editCategoryInput {
    artisan: [ID]
    created_by: ID
    description: String
    image: [ID]
    name: String
    slug: String
    updated_by: ID
}

input editComponentCustomCustomFieldInput {
    id: ID
    options: String
    required: Boolean
    title: String
}

input editFileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String
    height: Int
    mime: String
    name: String
    previewUrl: String
    provider: String
    provider_metadata: JSON
    related: [ID]
    size: Float
    updated_by: ID
    url: String
    width: Int
}

input editLocaleInput {
    code: String
    created_by: ID
    name: String
    updated_by: ID
}

input editRoleInput {
    created_by: ID
    description: String
    name: String
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input editUserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String
}

input updateArtisanInput {
    data: editArtisanInput
    where: InputID
}

input updateCategoryInput {
    data: editCategoryInput
    where: InputID
}

input updateRoleInput {
    data: editRoleInput
    where: InputID
}

input updateUserInput {
    data: editUserInput
    where: InputID
}
